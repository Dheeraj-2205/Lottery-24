// Layout of the contract file:
// version
// imports
// errors
// interfaces, libraries, contract

// Inside Contract:
// Type declarations
// State variables
// Events
// Modifiers
// Functions

// Layout of Functions:
// constructor
// receive function (if exists)
// fallback function (if exists)
// external
// public
// internal
// private

// view & pure functions

// SPDX-License-Identifier: SEE LICENSE IN LICENSE
pragma solidity 0.8.19;

import {VRFConsumerBaseV2Plus} from
    "lib/chainlink-brownie-contracts/contracts/src/v0.8/vrf/dev/VRFConsumerBaseV2Plus.sol";
import {VRFV2PlusClient} from "lib/chainlink-brownie-contracts/contracts/src/v0.8/vrf/dev/libraries/VRFV2PlusClient.sol";
/**
 * @author Dheeraj joshi
 * @title Lottery Ticket
 * @dev this contract creating the sample raffle
 */

contract Raffle is VRFConsumerBaseV2Plus {
    error Raffle__SendMoreEtherRaffle();
    error Raffle__TransferFailer();
    error Raffle_RaffleNotOpen();
    error Raffle_UpkeepNotNeeded(uint256 balance, uint256 playersLength, uint256 raffleState);

    // Type Declaration
    enum RaffleState {
        OPEN,
        CALCULATING
    }

    // State variables

    uint16 private constant REQUEST_CONFIRMATION = 3;
    uint32 private constant NUM_WORDS = 1;

    address payable[] private s_players;

    // @dev the duration of the lottery in seconds
    uint256 private immutable i_internal;
    uint256 private immutable i_subscriptionId;
    uint32 private immutable i_callbackGasLimit;
    bytes32 private immutable i_keyHash;
    uint256 private immutable i_entranceFee;

    uint256 private s_lastTime;
    address private s_recentWinner;
    RaffleState private s_raffleState;

    // Events
    event RaffleEntered(address indexed player);
    event WinnerPicked(address indexed winner);

    constructor(
        uint256 entranceFee,
        uint256 internally,
        address vrfCoordinator,
        bytes32 gasLane,
        uint256 subScriptionId,
        uint32 callbackGasLimit
    ) VRFConsumerBaseV2Plus(vrfCoordinator) {
        i_entranceFee = entranceFee;
        i_internal = internally;
        s_lastTime = block.timestamp;
        i_keyHash = gasLane;
        i_subscriptionId = subScriptionId;
        i_callbackGasLimit = callbackGasLimit;
        s_raffleState = RaffleState.OPEN;
    }

    function enterRaffle() external payable {
        if (msg.value < i_entranceFee) {
            revert Raffle__SendMoreEtherRaffle();
            // require(msg.value >= i_entranceFee , SendMoreEtherRaffle());
        }
        if (s_raffleState == RaffleState.OPEN) {
            revert Raffle_RaffleNotOpen();
        }

        s_players.push(payable(msg.sender));
        emit RaffleEntered(msg.sender);
    }
    /* 
     * @dev this is the function that chain link nodes call to see
     * if the llottery is ready to have a winner picked
     * the following should be true in order for upkeedneeded to be true :
     * 1 the time interval pass between raffle runs
     * 2 the lottery is open
     * 3 the contract has eth
     * 4 Implicity  your subscription is LINK \
     * @param null -ignored
     * @return upkeepNeeded - true if it time to restart the lottery
     * @return ignored
     */

    function checkUpkeep(bytes memory /* memory */ )
        public
        view
        returns (bool upkeepNeeded, bytes memory /* performData */ )
    {
        bool timeHasPassed = ((block.timestamp - s_lastTime) >= i_internal);
        bool isOpen = s_raffleState == RaffleState.OPEN;
        bool hasBalance = address(this).balance > 0;
        bool hasPlayers = s_players.length > 0;

        upkeepNeeded = timeHasPassed && isOpen && hasBalance && hasPlayers;

        return (upkeepNeeded, "");
    }

    // function performUpkeep(bytes calldata /* performData */ ) external override {
    //     (bool upkeepNeeded,) = checkUpkeep("");
    //     if (!upkeepNeeded) {
    //         revert Raffle_RaffleNotOpen(address(this).balance, s_players.length , uint256(s_raffleState));
    //     }
    //     if ((block.timestamp - s_lastTime) > interval) {
    //         s_lastTime = block.timestamp;
    //         counter = counter + 1;
    //     }
    //     // We don't use the performData in this example. The performData is generated by the Automation Node's call to your checkUpkeep function
    // }

    // 3.automatically called
    function performUpkeep(bytes calldata) external {
        (bool upkeepNeeded,) = checkUpkeep("");
        if (!upkeepNeeded) {
            revert Raffle_UpkeepNotNeeded(address(this).balance, s_players.length, uint256(s_raffleState));
        }
        // if ((block.timestamp - s_lastTime) < i_internal) {
        //     revert();
        // }

        s_raffleState = RaffleState.CALCULATING;

        VRFV2PlusClient.RandomWordsRequest memory request = VRFV2PlusClient.RandomWordsRequest({
            keyHash: i_keyHash,
            subId: i_subscriptionId,
            requestConfirmations: REQUEST_CONFIRMATION,
            callbackGasLimit: i_callbackGasLimit,
            numWords: NUM_WORDS,
            extraArgs: VRFV2PlusClient._argsToBytes(
                // Set nativePayment to true to pay for VRF requests with Sepolia ETH instead of LINK
                VRFV2PlusClient.ExtraArgsV1({nativePayment: false})
            )
        });
        s_vrfCoordinator.requestRandomWords(request);
    }

    //CEI : Checks, Effects, Interaction Pattern
    function fulfillRandomWords(uint256 , /*requestId, */ uint256[] calldata randomWords) internal override {
        //Checks
        // condition require this thing coming for the checks

        //Effect (Internal Contract State)
        uint256 indexWinner = randomWords[0] % s_players.length;
        address payable recentWinner = s_players[indexWinner];
        s_recentWinner = recentWinner;
        s_raffleState = RaffleState.OPEN;
        s_players = new address payable[](0);

        // Interaction (External Contract Interactions)
        (bool success,) = recentWinner.call{value: address(this).balance}("");
        if (!success) {
            revert Raffle__TransferFailer();
        }
        emit WinnerPicked(s_recentWinner);
    }

    function getEntranceFee() external view returns (uint256) {
        return i_entranceFee;
    }
}
